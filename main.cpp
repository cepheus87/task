#include "Vector.h"

int main() {
	Vector a;



	 cout << "1) " << a << endl;                 // 1) ()



	 //------------------------------------------------------------------------------

	 Vector b((unsigned)5);
	 cout << "2) " << b << endl;                 // 2) (0, 0, 0, 0, 0)




	 //------------------------------------------------------------------------------

	 Vector c(4, 1.03, 2.12, 3.25, 4.44);        // 3a) (1.03, 2.12, 3.25, 4.44)
	 Vector c1(2, 1.1, 2.2);                     // 3b) (1.1, 2.2)
	 Vector c2(6, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0); // 3c) (1, 2, 3, 4, 5, 6)
	 // generalnie konstruktor ma działać z dowolną liczbą parametrów
	 cout << "3a) " << c << endl;  
	 cout << "3b) " << c1 << endl;  
	 cout << "3c) " << c2 << endl;  

		cin.ignore();
		/*

	 Vector c3(c);
	 cout << "3d) " << c3 << endl;               // 3d) (1.03, 2.12, 3.25, 4.44)

	 //------------------------------------------------------------------------------

	 Vector c4 = c++;  
	 cout << "4a) " << c << endl;                // 4a) (2.03, 3.12, 4.25, 5.44)
	 cout << "4b) " << c4 << endl;               // 4b) (1.03, 2.12, 3.25, 4.44)
	 c4 = c4;                                    // UWAGA! Nawet jeśli będzie się kompilować i nawet jeśli będzie działać, to w definicji operatora może byc błąd
	 cout << "4c) " << c4 << endl;               // 4c) (1.03, 2.12, 3.25, 4.44)

	 //------------------------------------------------------------------------------

	 c++++;  
	 cout << "5) " << c << endl;                 // 5) (4.03, 4.12, 5.25, 6.44)

	 //------------------------------------------------------------------------------

	 c++++++;  
	 cout << "6) " << c << endl;                 // 6) (5.03, 6.12, 7.25, 8.44)

	 //------------------------------------------------------------------------------

	 Vector d = Vector::create(5, 0.0, 1.0, 2.0, 3.0, 4.0);
	 // generalnie zmiast konstruktora z dowolną liczbą parametrów, tworzymy metodę z dowolną liczbą parametrów, która tworzy obiekty klasy Vector
	 cout << "7) " << d << endl;                 // 7) (0, 1, 2, 3, 4)

	 //------------------------------------------------------------------------------

	 Vector d1 = ++d;  
	 cout << "8a) " << d << endl;                // 8a) (1, 2, 3, 4, 5)
	 cout << "8b) " << d1 << endl;               // 8b) (1, 2, 3, 4, 5)

	 //------------------------------------------------------------------------------

	 ++++d;  
	 cout << "9a) " << d << endl;                // 9a) (3, 4, 5, 6, 7)

	 ++++++d;  
	 cout << "9b) " << d << endl;                // 9b) (6, 7, 8, 9, 10)

	 //------------------------------------------------------------------------------

	 Vector e = Vector::create(5, -1.0, -2.0, -3.0, -4.0, -5.0);

	 Vector f = d + e;
	 cout << "10a) " << d << endl;               // 10a) (6, 7, 8, 9, 10)
	 cout << "10b) " << e << endl;               // 10b) (-1, -2, -3, -4, -5)
	 cout << "10c) " << f << endl;               // 10c) (5, 5, 5, 5, 5)

	 //------------------------------------------------------------------------------

	 Vector g = f * 2;
	 cout << "11a) " << f << endl;               // 11a) (5, 5, 5, 5, 5)
	 cout << "11b) " << g << endl;               // 11b) (10, 10, 10, 10, 10)

	 //------------------------------------------------------------------------------

	 Vector h = 2 * g;
	 cout << "12a) " << g << endl;               // 12a) (10, 10, 10, 10, 10)
	 cout << "12b) " << h << endl;               // 12b) (20, 20, 20, 20, 20)

	 //------------------------------------------------------------------------------

	 h *= 2;
	 cout << "13) " << h << endl;                // 13) (40, 40, 40, 40, 40)

	 //------------------------------------------------------------------------------

	 if (h == 40)
	 cout << "14) success" << endl;          // 14) success      
	 else
	 cout << "14) something is wrong" << endl;

	 //------------------------------------------------------------------------------

	 if (g != 0)
	 cout << "15) success" << endl;          // 15) success
	 else
	 cout << "15) something is wrong" << endl;

	 //------------------------------------------------------------------------------

	 Vector i = Vector::create(4, 1.0, 1.0, 1.0, 1.0);
	 Vector j = Vector::create(4, 1.0, 2.0, 3.0, 4.0);
	 double k = i * j;                           // iloczyn skalarny wektorów czyli: x1 * y1 + x2 * y2 + ... = 1.0 * 1.0 + 1.0 * 2.0 + 1.0 * 3.0 + 1.0 * 4.0
	 cout << "16a) " << i << endl;               // 16a) (1, 1, 1, 1)  
	 cout << "16b) " << j << endl;               // 16b) (1, 2, 3, 4)
	 cout << "16c) " << k << endl;               // 16c) 10 

	 //------------------------------------------------------------------------------

	 Vector l(5);
	 Vector m(3);
	 try {
	 double n = l * m;                       // iloczyn skalarny dwóch wektorów o różnych długościach nie istnieje, więc rzucamy wyjątek np. throw 1;
	 } catch(...) {
	 cout << "17) success" << endl;          // 17) success
	 }

	 //------------------------------------------------------------------------------

	 Vector o((unsigned)6);
	 o[1] = 2.5;
	 o[3] = 4.5;
	 o[5] = 6.5;
	 cout << "18) " << o << endl;                // 18) (0, 2.5, 0, 4.5, 0, 6.5)

	 //------------------------------------------------------------------------------

	 Vector p(5, 1.0, 2.0, 3.0, 4.0, 5.0);
	 Vector r = p >> 2;
	 Vector s = p >> 8;
	 cout << "19a) " << p << endl;           // 19a) (1, 2, 3, 4, 5)
	 cout << "19b) " << r << endl;           // 19b) (0, 0, 1, 2, 3)
	 cout << "19c) " << s << endl;           // 19c) (0, 0, 0, 0, 0)

	 //------------------------------------------------------------------------------

	 Vector t;
	 cin >> t;
	 cout << "20) " << t << endl;            // 20) (?, ?, ?, ?, ...)
	 */
	return 0;
}
